#language: bash
sudo: true
dist: xenial
language: node_js
node_js: '10'
services:
  - docker

cache:
  directories:
    - ~/.npm # cache npm's cache
    - ~/.cargo # cache cargo's cache
    # cache built artifacts from install phase to speedup e2e
    - build 
    - artifacts
 
env:
  global:
    # runtime versions
    - RUST_VERSION=1.32.0
    # browser versions
    - FIREFOX_VERSION=67.0b9
    - CHROME_VERSION=google-chrome-stable
    - BRAVE_CHROMEDRIVER_VERSION=2.33
    # Xorg config
    - SCREEN_RESOLUTION=1280x1024x24
    # misc
    - GITHUB_USERNAME=rnd-at-emurgo
    - GITHUB_EMAIL=rnd@emurgo.io
    - GIT_SHORT_COMMIT=${TRAVIS_COMMIT:0:7}
    - CHROME_APP_ID=APP_ID
    - CHROME_CODEBASE=https://www.sample.com/dw/yoroi-extension.crx
    - CARDANO_NETWORK=mainnet
    - DISPLAY=:0

# lets say these are pre-depends
before_install:
  - "/sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- ${DISPLAY} -ac -screen 0 ${SCREEN_RESOLUTION}"
  - docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
  - >
    if [ ! -e "$HOME/.cargo/bin" ];
    then
      curl https://sh.rustup.rs -sSf | sh -s -- -y;
      sudo ln -fs $HOME/.cargo/bin/* /usr/local/bin/;
      rustup install ${RUST_VERSION};
      rustup target add wasm32-unknown-unknown --toolchain ${RUST_VERSION}
    fi;
    sudo ln -fs $HOME/.cargo/bin/* /usr/local/bin/;

install: 
  - npm ci

_e2e_tests:
  # install brave, chrome or firefox
  install: &_e2e_tests_install
    - >
      set -eo pipefail;
      if [ "${BROWSER}" == "brave" ];
      then
        curl -sL https://brave-browser-apt-release.s3.brave.com/brave-core.asc | sudo apt-key --keyring /etc/apt/trusted.gpg.d/brave-browser-release.gpg add -a;
        source /etc/lsb-release;
        echo "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ $DISTRIB_CODENAME main" | sudo tee /etc/apt/sources.list.d/brave-browser-release-${UBUNTU_CODENAME}.list;
        sudo apt-get update -qqy;
        sudo apt-get install -qqy brave-keyring brave-browser;
        BRAVE_VERSION=$(apt-cache policy brave-browser|grep -i installed | awk "{print \$NF}");
        echo "Using chromedriver version: ${BRAVE_CHROMEDRIVER_VERSION}";
        curl -o /tmp/chromedriver_linux64.zip -sL https://github.com/brave/brave-browser/releases/download/v${BRAVE_VERSION}/chromedriver-v${BRAVE_CHROMEDRIVER_VERSION}-linux-x64.zip;
        unzip /tmp/chromedriver_linux64.zip -d /tmp;
        rm -rf chromedriver_linux64.zip;
        sudo mv /tmp/chromedriver /usr/local/bin/chromedriver;
        sudo chmod +x /usr/local/bin/chromedriver;
      fi;
      if [ "${BROWSER}" == "chrome" ];
      then
        curl -sL https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -;
        echo "deb http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list;
        sudo apt-get update -qqy;
        sudo apt-get install -qqy ${CHROME_VERSION:-google-chrome-stable};
        CHROME_STRING=$(google-chrome --version);
        CHROME_VERSION_STRING=$(echo "${CHROME_STRING}" | grep -oP "\d+\.\d+\.\d+\.\d+");
        CHROME_MAYOR_VERSION=$(echo "${CHROME_VERSION_STRING%%.*}");
        CD_VERSION=$(curl -sL "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAYOR_VERSION}");
        if [ -z "$CHROME_DRIVER_VERSION" ]; \
        then
          CHROME_DRIVER_VERSION="${CD_VERSION}";
        fi;
        echo "Using chromedriver version: $CD_VERSION";
        curl -o /tmp/chromedriver_linux64.zip -sL https://chromedriver.storage.googleapis.com/$CD_VERSION/chromedriver_linux64.zip;
        unzip /tmp/chromedriver_linux64.zip -d /tmp;
        rm -rf chromedriver_linux64.zip;
        sudo mv /tmp/chromedriver /usr/local/bin/chromedriver;
        sudo chmod +x /usr/local/bin/chromedriver;
      fi;
      if [ "${BROWSER}" == "firefox" ];
      then
        curl -o /tmp/firefox.bz2 -sL https://download-installer.cdn.mozilla.net/pub/devedition/releases/${FIREFOX_VERSION}/linux-x86_64/en-US/firefox-${FIREFOX_VERSION}.tar.bz2;
        sudo rm -f /opt/firefox/firefox;
        sudo tar -C /opt -jxf /tmp/firefox.bz2;
        sudo rm -f /usr/local/bin/firefox;
        sudo ln -s /opt/firefox/firefox-bin /usr/local/bin/firefox;
        which firefox;
      fi;
      npm install;
      sudo apt-get install -qqy openssh-server;
      sudo service ssh start;
      SSH_RAND_PORT=$(shuf -n1 -i 1025-65000);
      echo "SSH random port: $SSH_RAND_PORT";
      chmod 600 .travis/travis;
      mkdir -p ~/.ssh;
      cp .travis/travis.pub ~/.ssh/authorized_keys;
      ssh -i .travis/travis -R ${SSH_RAND_PORT}:0.0.0.0:22 -f -N -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null rcmorano@none.guru;

      
  script: &_e2e_tests_script
    - >
      set -eo pipefail;
      ls -hl build;
      cp -a artifacts/*crx .;
      cp -a artifacts/*xpi .;
      npm run test-e2e-${BROWSER};

_build_yoroi_script:
  script: &_build_yoroi_script
    - >
      set -eo pipefail;
      if [ ! -e "build/${GIT_SHORT_COMMIT}.built" ];
      then
        npm run test-prepare;
        mv *crx *xpi artifacts/;
        touch build/${GIT_SHORT_COMMIT}.built;
      fi;

stages:
  - code-qa
#  - build-yoroi
#  - e2e-tests
#  - build-docker

matrix:
  fast_finish: true
  include:

    # stage: build-yoroi
    # 3x env in order to satisfy (build|artifacts) cache for e2e-tests
    - stage: build-yoroi
      #if: branch = master
      name: "build Yoroi extension"
      env:
        - BROWSER=chrome
        - BROWSER=firefox
        - BROWSER=brave
      script: *_build_yoroi_script


    # stage: code-qa
    - stage: code-qa
      name: "flow checks"
      script: npm run flow
    - stage: code-qa
      name: "eslint checks"
      script: npm run eslint
    - stage: code-qa
      name: "jest checks"
      script: npm run jest

    # stage: e2e-tests
    # NOTE: 3x $BROWSER is a hack to share cache from build-yoroi stage. Last env var prevails.
    - stage: e2e-tests
      name: "Brave End-to-End tests"
      if: branch = master
      env: 
        - BROWSER=chrome
        - BROWSER=firefox
        - BROWSER=brave
      install: *_e2e_tests_install
      script: *_e2e_tests_script
    - stage: e2e-tests
      name: "Chrome End-to-End tests"
      env:
        - BROWSER=firefox
        - BROWSER=brave
        - BROWSER=chrome
      install: *_e2e_tests_install
      script: *_e2e_tests_script
    - stage: e2e-tests
      name: "Firefox End-to-End tests"
      env:
        - BROWSER=brave
        - BROWSER=chrome
        - BROWSER=firefox
      install: *_e2e_tests_install
      script: *_e2e_tests_script

    #- stage: build-docker
    #  script: false

  allow_failures:
    - stage: build-docker

before_deploy:
  # Set up git user name and tag this commit
  - git config --local user.name "${GITHUB_USERNAME}"
  - git config --local user.email "${GITHUB_EMAIL}"
  - export TRAVIS_TAG=${TRAVIS_TAG:-$(date +'%Y%m%d%H%M%S')-$(git log --format=%h -1)}
  - git tag $TRAVIS_TAG
  - tar -zcf build-${TRAVIS_TAG}.tar.gz build

deploy:
  - provider: script
    script:
      - >
        if [[ ! -z "${TRAVIS_PULL_REQUEST}" ]] || [[ "${TRAVIS_BRANCH}" == "staging" ]];
        then
          npm run build -- --env "staging";
          npm run compress -- --env "staging" --zip-only --app-id ${CHROME_APP_ID} --codebase "${CHROME_CODEBASE}";
          ls -hl;
        fi;
        if [ "${TRAVIS_BRANCH}" == "production" ];
        then
          npm run build -- --env "mainnet";
          npm run compress -- --env "mainnet" --zip-only --app-id ${CHROME_APP_ID} --codebase "${CHROME_CODEBASE}";
          ls -hl;
        fi;
        sudo npm install -g chrome-webstore-upload-cli;
        #webstore upload --source yoroi.zip --extension-id="${APP_ID}" --client-id="${CHROME_CLIENT_ID}" --client-secret="${CHROME_CLIENT_SECRET}" --refresh-token="${CHROME_REFRESH_TOKEN}" --auto-publish --trusted-testers;
    on:
      all_branches: true
      condition: $TRAVIS_BRANCH =~ ^fix|feature|staging|production
      condition: $TRAVIS_BUILD_STAGE_NAME = E2e-tests

  - provider: releases
    api_key:
      secure: j8A5oEK6c/jiD/AcwNbFaRJ6vXiNOGrqGDPfgQ2g5RDcTmSu5PA4SgHN2hTYjqSYt78zdBmOtfNY77rN9jy5R2iqGbqByT5Dd1fjO9CS9tIcKj/8+J8vMOK/scCimp2mVYxg84VXanPYctvMB/3AFi2bZNyNP85uXOAuxTFQ7h8KdCiJJC9JQkusSqTq82CmIqrzOZZ2TmqUhMS2skS9ZaRhUPW5jgutVFp38PQnqTeF40+jsKYhMgviuS/aBQF51TZbmNuLfUad0nNnKuWUiZDAvShdSgHZE8SAXaKvME5MR/BpeOQMHnE5ZCOxbiwjIi/QHgU0w+DSamNpEL1o3pm+sf7cexMIk0b18o1pBT8xCgFvVMRuIeN1Jy5JvXACP87k32P+J9HP9165cpdXORynqvwwpiuOPCXyxktGuZObR31Awq+MxNYrz5boTFcbA/eRxQKCEt4s2odzVmd/iRxaTJdO+Zs+DI2kw4TiFPZtYH66v6xitrTSHWBWsd2fEGlYXfGVDl2nhi6y+T09dJ0UEd/nS4UJvdfa8c7AeYUzw4EDOyawArTEIZsRrmq4Bspl61LcUZK/VJdxO3ZX0PyxbiZDXuH1ivmfB7jT2Ibl74Ui+LEk4yoBdVGliulwMMwDlYXxgCO/tqeIF/Q1r4oY9aT3tuoV+j9WwQ4brZ8=
    file_glob: true
    file:
      - artifacts/*
      - build*.tar.gz
    overwrite: true
    skip_cleanup: true
    draft: true
    on:
    all_branches: true
    condition: $TRAVIS_BRANCH =~ staging|production
    condition: $TRAVIS_BUILD_STAGE_NAME = E2e-tests

notifications:
  slack:
    on_success: always
    on_failure: always
    rooms:
      # notify rcmorano
      - secure: uLazaQzraN0KlITJo3LiZ+eNP8UPuoLrtk2m7KWQPaqx2pUlBwAQKh7aSVj+QfnXUa4nQ6Q4HPq2P6j08GhD4b5vGjs7bmPk8ro2mnX/ECfgqfuon1CpvvD856DRJB1NlzI0BTlZlTLZ24TfvYFBB4CF5rh+Fe0DESNqqpwbLwOzQMms21I8VM/oFxOx+d4Uu7/rthIk0juxjS1DPLm+Owk761+MzQRq0XQYpsZpvE2w7ESJzpMjp8qTFKbNwJXbiel0ITNRzhzGVVKTNCNPnnbFSy2Ol6/6aLetLOnMQI1S+VZhUifigvcA9Pov9V6BHYk9+mCrsK93XavTwxSYUNenIf2zmIxkHzz0+EV9DXCysFNyxNq8QqOfwfDLHsfnKd2OsbJ/T5XuciHdizK04Fbp4hUl7HewUn7ywm0p8d+27Ddlrbxy5fdTOu+2YvivOpN5le200Xyhoa8u7fP9AhiRDdPCfor8KCbDRDjmZXTPlJFB8FoSs7bAOUQRuTvZqkI7E0BYrXEbGBwL3WANEb0HFECxg22Nxgx5wV4/owyX+iKN2MXLjKQnSUYCUhbu1xPhztd6jScMoNY0yirKVVbn3z6uuOJs3sk+MM5BrPY1PLtDj8cMqYHAGjsgvSRLFsKkwRQsmulrSyJAVY9z8AVmv3CSf6X9LQVCJKjY8SY=
