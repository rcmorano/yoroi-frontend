language: bash
sudo: true
#language: node_js
#node_js: '10'
cache:
  directories:
    - .npm # cache npm's cache
    #- .cargo # cache cargo's cache
services:
  - docker

build:
  - docker build

env:
  global:
    - RUST_VERSION=1.32.0
    - NODE_VERSION=10
    - DOCKER_IMAGE_SOURCE=rcmorano/yoroi-src:${TRAVIS_COMMIT}
    - DOCKER_IMAGE_BUILD_ENV=rcmorano/yoroi-build-env:node_${NODE_VERSION}-rust_${RUST_VERSION}
    - DOCKER_IMAGE_BUILD=rcmorano/yoroi-${CARDANO_NETWORK}:${TRAVIS_COMMIT}
    - DOCKER_IMAGE_DEV_ENV=rcmorano/yoroi-dev-env
    - DOCKER_IMAGE_STANDALONE=rcmorano/yoroi-standalone

docker-login: docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"

# stages order, each must cleanly pass for the next to run
stages:
  - build-env-setup
  - build
  - test
  #- build-dev-env
  #- push-artifacts

jobs:
  include:
    - stage: build-env-setup
      
      script:
        - >
          docker pull ${DOCKER_IMAGE_SOURCE} ||
          ( 
            docker build -t ${DOCKER_IMAGE_SOURCE} -f Dockerfile.src .
          )
        - >
          docker pull ${DOCKER_IMAGE_BUILD_ENV} || 
          (
            docker build --target rust-env-setup -t ${DOCKER_IMAGE_BUILD_ENV} .
            docker push ${DOCKER_IMAGE_BUILD_ENV};
          )
          
    - stage: build
      env:
        - CARDANO_NETWORK=testnet
        - CARDANO_NETWORK=mainnet
      script: 
        - >
          docker build --target yoroi-build -t ${DOCKER_IMAGE_BUILD} .

    - stage: test
      script:
        - > 
          docker run -it --entrypoint=bash ${DOCKER_IMAGE_BUILD} -c "
          set -e;
          # code quality checks
          npm run flow;
          npm run eslint;
          # javascript tests
          npm run jest;
          # create extensions to be consumed by browsers
          npm run test-prepare
          "
          
    #- stage: build-dev-env
    #- stage: push-artifacts
    #  if: (branch = develop) OR (branch = master)
    #  script: 
    #    - docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD";
    #      DOCKER_IMAGE_COMMIT=$(git log -1 --pretty=format:'%h');
    #      DOCKER_IMAGE_TIMESTAMP=$(docker inspect -f '{{ .Created }}' ${DOCKER_IMAGE}|awk -F':' '{print $1$2}'|sed 's%-\|T%%g');
    #      docker tag $DOCKER_IMAGE:latest $DOCKER_IMAGE:$DOCKER_IMAGE_TIMESTAMP-$DOCKER_IMAGE_COMMIT;
    #      docker push $DOCKER_IMAGE:latest;
    #      docker push $DOCKER_IMAGE:$DOCKER_IMAGE_TIMESTAMP-$DOCKER_IMAGE_COMMIT;

    - stage: prepare-cache
      script: 
        - >
          docker cp $(docker create ${DOCKER_IMAGE_BUILD}):/root/.npm .
          chown -R ${id -u}:${id -g} .

notifications:
  slack:
    on_success: change
    on_failure: always
    # notify rcmorano
    secure: kHi8Xliok2qLhuSIZDIGHUfe8EEGFGyfHViBQP40zK7arvI/8kY5h1OtBVP/s/BE3DRdzlM9IJ7R+B7dM8wuKpWflEB9mkamy0wTvEnIS4gIEGd50kDt0bcTxcEgPfJM4IVPwwEQrhd+ftX6YJ4bEQJioDWz+GGCtJXCFtmTj+mvMiySUpKKckwJj2tPQmnS/dCPpgcjLe/GSD3dCpsFvx1jfT3OJkJjkAdmUQlcHsFEtzWgcdgIPUX6OtB75zO1BJyutvTZ04bkQCcO5pZzOjd99BPmF2wqaS/ukD2KcMWUadcpSdi0CGxUN5FH02JlmJd6C6Im03I4SKYE+PKE1EUstx+DQaQ2sKvhKoN2fmK0SgLt2V6X4vlG3c/ofWT/nH6HljayHpetdnNgGIk66Ry7BApIs7oj53Cqe0q8vwN6vHwFHetcPWNHi0B48BYMcaAyNLNQCYEa6QEmiLibWiWWMFRpM1SJTrOow78CSitfK6hsGpbFjoGd0gGXwLbhQFvOzWg7IbJ4dNwi7S21Tat4qBs//j5DT9QrofvRPh83HnLs6W3IRJpuGFfxHp5DRGCigB7VQlgEHZED010gbuBa7i5JMSCy0vyn13uX5HJ6xYDXGT0W8NFY3/pIATiQCD8hP1JzhgRjQxa4JeCsZH5gu7gKXwDkQcwF7ehL+jM=
